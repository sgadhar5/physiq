{"ast":null,"code":"var _jsxFileName = \"/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \".../firebaseConfig\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteWriter() {\n  _s();\n  var _auth$currentUser;\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const textAreaRef = useRef(null);\n  const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid; // Get logged-in user's ID\n\n  // Load saved note from Firestore when component mounts\n  useEffect(() => {\n    if (userId) {\n      loadNote();\n    }\n  }, [userId]);\n  const handleInputChange = e => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n  // Save note & physical exam to Firestore\n  const saveNote = async () => {\n    if (!userId) {\n      alert(\"You need to be logged in to save notes.\");\n      return;\n    }\n    try {\n      await setDoc(doc(db, \"notes\", userId), {\n        noteText,\n        physicalExamText\n      });\n      alert(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note from Firestore\n  const loadNote = async () => {\n    if (!userId) return;\n    try {\n      const docSnap = await getDoc(doc(db, \"notes\", userId));\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notewriter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDE7A EMR Note Writer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"active\",\n            children: \"New Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Patient History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Orders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Labs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"notewriter-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Clinical Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textAreaRef,\n        className: \"notewriter-textarea\",\n        placeholder: \"Type your clinical notes here...\",\n        value: noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"exam-button\",\n          onClick: () => setIsExamModalOpen(true),\n          children: \"Open Physical Exam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: saveNote,\n          children: \"Save Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"load-button\",\n          onClick: loadNote,\n          children: \"Load Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), isExamModalOpen && /*#__PURE__*/_jsxDEV(PhysicalExamModal, {\n      setIsExamModalOpen: setIsExamModalOpen,\n      setPhysicalExamText: setPhysicalExamText,\n      existingExamText: physicalExamText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteWriter, \"3gM0F4X5qlTwTcv694kIu3uzjzs=\");\n_c = NoteWriter;\nexport default NoteWriter;\nvar _c;\n$RefreshReg$(_c, \"NoteWriter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","db","doc","setDoc","getDoc","PhysicalExamModal","jsxDEV","_jsxDEV","NoteWriter","_s","_auth$currentUser","noteText","setNoteText","physicalExamText","setPhysicalExamText","isExamModalOpen","setIsExamModalOpen","textAreaRef","userId","currentUser","uid","loadNote","handleInputChange","e","updatedText","target","value","includes","splitIndex","indexOf","slice","saveNote","alert","error","console","docSnap","exists","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","placeholder","onChange","onClick","existingExamText","_c","$RefreshReg$"],"sources":["/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \".../firebaseConfig\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\n\nfunction NoteWriter() {\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const textAreaRef = useRef(null);\n  const userId = auth.currentUser?.uid; // Get logged-in user's ID\n\n  // Load saved note from Firestore when component mounts\n  useEffect(() => {\n    if (userId) {\n      loadNote();\n    }\n  }, [userId]);\n\n  const handleInputChange = (e) => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n  // Save note & physical exam to Firestore\n  const saveNote = async () => {\n    if (!userId) {\n      alert(\"You need to be logged in to save notes.\");\n      return;\n    }\n\n    try {\n      await setDoc(doc(db, \"notes\", userId), {\n        noteText,\n        physicalExamText,\n      });\n      alert(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note from Firestore\n  const loadNote = async () => {\n    if (!userId) return;\n\n    try {\n      const docSnap = await getDoc(doc(db, \"notes\", userId));\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n\n  return (\n    <div className=\"notewriter-container\">\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <h2>ðŸ©º EMR Note Writer</h2>\n        <nav>\n          <ul>\n            <li className=\"active\">New Note</li>\n            <li>Patient History</li>\n            <li>Orders</li>\n            <li>Labs</li>\n          </ul>\n        </nav>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"notewriter-content\">\n        <h1>Clinical Documentation</h1>\n\n        {/* Combined Textbox (Editable & Non-Editable Sections) */}\n        <textarea\n          ref={textAreaRef}\n          className=\"notewriter-textarea\"\n          placeholder=\"Type your clinical notes here...\"\n          value={noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText}\n          onChange={handleInputChange}\n        />\n\n        <div className=\"button-group\">\n          <button className=\"exam-button\" onClick={() => setIsExamModalOpen(true)}>\n            Open Physical Exam\n          </button>\n          <button className=\"save-button\" onClick={saveNote}>\n            Save Note\n          </button>\n          <button className=\"load-button\" onClick={loadNote}>\n            Load Note\n          </button>\n        </div>\n      </main>\n\n      {/* Physical Exam Pop-Up */}\n      {isExamModalOpen && (\n        <PhysicalExamModal\n          setIsExamModalOpen={setIsExamModalOpen}\n          setPhysicalExamText={setPhysicalExamText}\n          existingExamText={physicalExamText}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default NoteWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}