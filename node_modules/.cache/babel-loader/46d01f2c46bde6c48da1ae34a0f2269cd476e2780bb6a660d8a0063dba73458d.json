{"ast":null,"code":"var _jsxFileName = \"/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { collection, query, where, orderBy, limit, getDocs, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteWriter() {\n  _s();\n  var _auth$currentUser;\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(\"notes\"); // Toggle between Notes and Vitals\n  const [vitals, setVitals] = useState({\n    bloodPressure: \"\",\n    heartRate: \"\",\n    temperature: \"\"\n  });\n  const textAreaRef = useRef(null);\n  const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid;\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchPatients(); // Fetch patient list once\n\n    if (patientName && visitDate) {\n      loadNote();\n      loadVitals();\n    }\n  }, [patientName, visitDate]);\n  const handleLogout = async () => {\n    try {\n      await auth.signOut();\n      navigate(\"/\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      alert(\"Failed to log out.\");\n    }\n  };\n  const fetchPastNotes = async patientName => {\n    try {\n      const patientDocRef = doc(db, \"patients\", patientName);\n      const notesCollectionRef = collection(patientDocRef, \"notes\");\n      const notesQuery = query(notesCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5));\n      const querySnapshot = await getDocs(notesQuery);\n      const pastNotes = [];\n      querySnapshot.forEach(doc => {\n        pastNotes.push(doc.data().noteText);\n      });\n      return pastNotes;\n    } catch (error) {\n      console.error(\"Error fetching past notes:\", error);\n      return [];\n    }\n  };\n\n  // Function to generate suggestions using OpenAI's GPT-4\n  const generateSuggestion = async (currentText, patientName) => {\n    const pastNotes = await fetchPastNotes(patientName);\n    if (!pastNotes.length) return \"\"; // No past notes to analyze\n\n    const prompt = `\n      You are an AI medical assistant helping a doctor write clinical notes.\n      The doctor prefers the following writing style:\n      \n      ${pastNotes.join(\"\\n\\n\")}  \n  \n      Now, based on this style, suggest a likely next sentence for:\n      \"${currentText}\"\n    `;\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` // Replace with your actual API key securely\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          prompt: prompt,\n          max_tokens: 50,\n          temperature: 0.7\n        })\n      });\n      const data = await response.json();\n      return data.choices[0].text.trim();\n    } catch (error) {\n      console.error(\"Error generating AI suggestion:\", error);\n      return \"\";\n    }\n  };\n  const loadNotes = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitsCollectionRef = collection(patientDocRef, \"visits\");\n      const q = query(visitsCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5));\n      const querySnapshot = await getDocs(q);\n      const notes = [];\n      querySnapshot.forEach(doc => {\n        notes.push(doc.data().noteText);\n      });\n      if (notes.length > 0) {\n        getPredictiveText(notes);\n      } else {\n        alert(\"No saved notes found for this patient.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading notes:\", error);\n      alert(\"Failed to load notes.\");\n    }\n  };\n  const [predictions, setPredictions] = useState([]);\n  const handleGeneratePrediction = async () => {\n    if (!patientName) {\n      alert('Please select a patient.');\n      return;\n    }\n    const predictionText = await generateSuggestion(noteText, patientName);\n    setPrediction(predictionText);\n  };\n\n  // Fetch list of patients from Firestore\n  const fetchPatients = async () => {\n    try {\n      const notesCollectionRef = collection(db, \"notes\");\n      const snapshot = await getDocs(notesCollectionRef);\n      let patientList = snapshot.docs.map(doc => doc.id);\n      setPatients(patientList);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      alert(\"Failed to load patients.\");\n    }\n  };\n  // Save note under the selected patient's visit\n  const saveNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      await setDoc(patientDocRef, {\n        exists: true\n      }, {\n        merge: true\n      });\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n      // Get existing data to merge instead of replacing\n      const visitSnap = await getDoc(visitRef);\n      let existingData = visitSnap.exists() ? visitSnap.data() : {};\n      await setDoc(visitRef, {\n        ...existingData,\n        // Keep existing vitals if they exist\n        noteText,\n        physicalExamText,\n        timestamp: new Date()\n      });\n      alert(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note for a specific patient and visit date\n  const loadNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      } else {\n        alert(\"No saved note found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n  const saveVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      await setDoc(patientDocRef, {\n        exists: true\n      }, {\n        merge: true\n      });\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n      // Get existing data to merge instead of replacing\n      const visitSnap = await getDoc(visitRef);\n      let existingData = visitSnap.exists() ? visitSnap.data() : {};\n      await setDoc(visitRef, {\n        ...existingData,\n        // Keep existing notes if they exist\n        vitals,\n        timestamp: new Date()\n      });\n      alert(\"Vitals saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving vitals:\", error);\n      alert(\"Failed to save vitals.\");\n    }\n  };\n\n  // Load vitals for a specific patient and visit date\n  const loadVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists() && docSnap.data().vitals) {\n        const vitalsData = docSnap.data().vitals;\n        setVitals(vitalsData);\n\n        // Format the vitals section\n        const vitalsText = `\\n\\n**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`;\n        setVitalsSection(`**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`);\n\n        // Ensure it is inserted AFTER the physical exam section\n      } else {\n        alert(\"No saved vitals found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading vitals:\", error);\n      alert(\"Failed to load vitals.\");\n    }\n  };\n  const [vitalsSection, setVitalsSection] = useState(\"**Vitals**\\n- Blood Pressure: N/A\\n- Heart Rate: N/A BPM\\n- Temperature: N/A°F\");\n  const handleInputChange = e => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notewriter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDE7A EMR System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedPage === \"notes\" ? \"active\" : \"\",\n            onClick: () => setSelectedPage(\"notes\"),\n            children: \"Clinical Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedPage === \"vitals\" ? \"active\" : \"\",\n            onClick: () => setSelectedPage(\"vitals\"),\n            children: \"Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Patient Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: patientName,\n            onChange: e => setPatientName(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this), patients.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: name,\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Or enter a new patient\",\n            value: patientName,\n            onChange: e => setPatientName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Visit Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: visitDate,\n            onChange: e => setVisitDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), selectedPage === \"notes\" ? /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"notewriter-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Clinical Documentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textAreaRef,\n          className: \"notewriter-textarea\",\n          placeholder: \"Type your clinical notes here...\",\n          value: noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText + \"\\n\\n\" + vitalsSection,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGeneratePrediction,\n          children: \"Generate Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 4\n        }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Prediction:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: prediction\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"exam-button\",\n            onClick: () => setIsExamModalOpen(true),\n            children: \"Open Physical Exam\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveNote,\n            children: \"Save Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"refresh-button\",\n            onClick: () => {\n              loadNote();\n              loadVitals();\n            },\n            children: \"\\uD83D\\uDD04 Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"load-button\",\n            onClick: loadNote,\n            children: \"Load Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"vitals-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Patient Vitals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Blood Pressure (mmHg)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"e.g. 120/80\",\n            value: vitals.bloodPressure,\n            onChange: e => setVitals({\n              ...vitals,\n              bloodPressure: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Heart Rate (BPM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"e.g. 72\",\n            value: vitals.heartRate,\n            onChange: e => setVitals({\n              ...vitals,\n              heartRate: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Temperature (\\xB0F)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            step: \"0.1\",\n            placeholder: \"e.g. 98.6\",\n            value: vitals.temperature,\n            onChange: e => setVitals({\n              ...vitals,\n              temperature: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveVitals,\n            children: \"Save Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"load-button\",\n            onClick: loadVitals,\n            children: \"Load Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), isExamModalOpen && /*#__PURE__*/_jsxDEV(PhysicalExamModal, {\n      setIsExamModalOpen: setIsExamModalOpen,\n      setPhysicalExamText: setPhysicalExamText,\n      existingExamText: physicalExamText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteWriter, \"vFuQWgcDNPXXih5cSoRUZNzkVoM=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteWriter;\nexport default NoteWriter;\nvar _c;\n$RefreshReg$(_c, \"NoteWriter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","db","useNavigate","PhysicalExamModal","collection","query","where","orderBy","limit","getDocs","doc","setDoc","getDoc","jsxDEV","_jsxDEV","NoteWriter","_s","_auth$currentUser","patientName","setPatientName","visitDate","setVisitDate","prediction","setPrediction","noteText","setNoteText","physicalExamText","setPhysicalExamText","isExamModalOpen","setIsExamModalOpen","patients","setPatients","selectedPage","setSelectedPage","vitals","setVitals","bloodPressure","heartRate","temperature","textAreaRef","userId","currentUser","uid","navigate","fetchPatients","loadNote","loadVitals","handleLogout","signOut","error","console","alert","fetchPastNotes","patientDocRef","notesCollectionRef","notesQuery","querySnapshot","pastNotes","forEach","push","data","generateSuggestion","currentText","length","prompt","join","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","json","choices","text","trim","loadNotes","visitsCollectionRef","q","notes","getPredictiveText","predictions","setPredictions","handleGeneratePrediction","predictionText","snapshot","patientList","docs","map","id","saveNote","exists","merge","visitRef","visitSnap","existingData","timestamp","Date","docSnap","saveVitals","vitalsData","vitalsText","setVitalsSection","vitalsSection","handleInputChange","e","updatedText","target","value","includes","splitIndex","indexOf","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","name","type","placeholder","ref","step","existingExamText","_c","$RefreshReg$"],"sources":["/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { collection, query, where, orderBy, limit, getDocs, doc, setDoc,getDoc } from \"firebase/firestore\";\n\n\nfunction NoteWriter() {\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(\"notes\"); // Toggle between Notes and Vitals\n  const [vitals, setVitals] = useState({ bloodPressure: \"\", heartRate: \"\", temperature: \"\" });\n  const textAreaRef = useRef(null);\n  const userId = auth.currentUser?.uid;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchPatients(); // Fetch patient list once\n  \n    if (patientName && visitDate) {\n      loadNote();\n      loadVitals();\n    }\n\n  }, [patientName, visitDate]);\n  \n  \n\n  const handleLogout = async () => {\n    try {\n      await auth.signOut();\n      navigate(\"/\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      alert(\"Failed to log out.\");\n    }\n  };\n\n  const fetchPastNotes = async (patientName) => {\n    try {\n      const patientDocRef = doc(db, \"patients\", patientName);\n      const notesCollectionRef = collection(patientDocRef, \"notes\");\n      const notesQuery = query(notesCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5));\n      const querySnapshot = await getDocs(notesQuery);\n      const pastNotes = [];\n      querySnapshot.forEach((doc) => {\n        pastNotes.push(doc.data().noteText);\n      });\n      return pastNotes;\n    } catch (error) {\n      console.error(\"Error fetching past notes:\", error);\n      return [];\n    }\n  };\n  \n  // Function to generate suggestions using OpenAI's GPT-4\n  const generateSuggestion = async (currentText, patientName) => {\n    const pastNotes = await fetchPastNotes(patientName);\n    if (!pastNotes.length) return \"\"; // No past notes to analyze\n  \n    const prompt = `\n      You are an AI medical assistant helping a doctor write clinical notes.\n      The doctor prefers the following writing style:\n      \n      ${pastNotes.join(\"\\n\\n\")}  \n  \n      Now, based on this style, suggest a likely next sentence for:\n      \"${currentText}\"\n    `;\n  \n    try {\n      const response = await fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY`, // Replace with your actual API key securely\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          prompt: prompt,\n          max_tokens: 50,\n          temperature: 0.7,\n        }),\n      });\n  \n      const data = await response.json();\n      return data.choices[0].text.trim();\n    } catch (error) {\n      console.error(\"Error generating AI suggestion:\", error);\n      return \"\";\n    }\n  };\n\n\n\n\n  const loadNotes = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n  \n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitsCollectionRef = collection(patientDocRef, \"visits\");\n      const q = query(visitsCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5));\n      const querySnapshot = await getDocs(q);\n  \n      const notes = [];\n      querySnapshot.forEach((doc) => {\n        notes.push(doc.data().noteText);\n      });\n  \n      if (notes.length > 0) {\n        getPredictiveText(notes);\n      } else {\n        alert(\"No saved notes found for this patient.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading notes:\", error);\n      alert(\"Failed to load notes.\");\n    }\n  };\n  const [predictions, setPredictions] = useState([]);\n\n  const handleGeneratePrediction = async () => {\n    if (!patientName) {\n      alert('Please select a patient.');\n      return;\n    }\n    const predictionText = await generateSuggestion(noteText, patientName);\n    setPrediction(predictionText);\n  };\n\n\n\n  \n  \n  \n  // Fetch list of patients from Firestore\n  const fetchPatients = async () => {\n    try {\n      const notesCollectionRef = collection(db, \"notes\");\n      const snapshot = await getDocs(notesCollectionRef);\n      let patientList = snapshot.docs.map((doc) => doc.id);\n      setPatients(patientList);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      alert(\"Failed to load patients.\");\n    }\n  };\n // Save note under the selected patient's visit\n const saveNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    await setDoc(patientDocRef, { exists: true }, { merge: true });\n\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n    // Get existing data to merge instead of replacing\n    const visitSnap = await getDoc(visitRef);\n    let existingData = visitSnap.exists() ? visitSnap.data() : {};\n\n    await setDoc(visitRef, {\n      ...existingData, // Keep existing vitals if they exist\n      noteText,\n      physicalExamText,\n      timestamp: new Date(),\n    });\n\n    alert(\"Note saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving note:\", error);\n    alert(\"Failed to save note.\");\n  }\n};\n\n\n\n// Load note for a specific patient and visit date\nconst loadNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n    const docSnap = await getDoc(visitRef);\n\n\n    if (docSnap.exists()) {\n      setNoteText(docSnap.data().noteText || \"\");\n      setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n    } else {\n      alert(\"No saved note found for this patient and visit date.\");\n    }\n  } catch (error) {\n    console.error(\"Error loading note:\", error);\n    alert(\"Failed to load note.\");\n  }\n};\n\nconst saveVitals = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    await setDoc(patientDocRef, { exists: true }, { merge: true });\n\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n    // Get existing data to merge instead of replacing\n    const visitSnap = await getDoc(visitRef);\n    let existingData = visitSnap.exists() ? visitSnap.data() : {};\n\n    await setDoc(visitRef, {\n      ...existingData, // Keep existing notes if they exist\n      vitals,\n      timestamp: new Date(),\n    });\n\n    alert(\"Vitals saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving vitals:\", error);\n    alert(\"Failed to save vitals.\");\n  }\n};\n\n\n  // Load vitals for a specific patient and visit date\n  const loadVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n  \n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n  \n      if (docSnap.exists() && docSnap.data().vitals) {\n        const vitalsData = docSnap.data().vitals;\n  \n        setVitals(vitalsData);\n  \n        // Format the vitals section\n        const vitalsText = `\\n\\n**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`;\n        setVitalsSection(`**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`);\n\n        // Ensure it is inserted AFTER the physical exam section\n\n      } else {\n        alert(\"No saved vitals found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading vitals:\", error);\n      alert(\"Failed to load vitals.\");\n    }\n  };\n  const [vitalsSection, setVitalsSection] = useState(\"**Vitals**\\n- Blood Pressure: N/A\\n- Heart Rate: N/A BPM\\n- Temperature: N/A°F\");\n\n\n  const handleInputChange = (e) => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n \n \n  return (\n    <div className=\"notewriter-container\">\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <h2>🩺 EMR System</h2>\n        <nav>\n          <ul>\n            <li className={selectedPage === \"notes\" ? \"active\" : \"\"} onClick={() => setSelectedPage(\"notes\")}>\n              Clinical Notes\n            </li>\n            <li className={selectedPage === \"vitals\" ? \"active\" : \"\"} onClick={() => setSelectedPage(\"vitals\")}>\n              Vitals\n            </li>\n          </ul>\n        </nav>\n        <button className=\"logout-button\" onClick={handleLogout}>\n          Logout\n        </button>\n      </aside>\n\n      {/* Patient Selection */}\n      <div className=\"content-container\">\n        <div className=\"patient-info\">\n          <h3>Patient Selection</h3>\n          <div className=\"input-group\">\n            <label>Patient Name</label>\n            <select value={patientName} onChange={(e) => setPatientName(e.target.value)}>\n              <option value=\"\">Select a patient</option>\n              {patients.map((name) => (\n                <option key={name} value={name}>{name}</option>\n              ))}\n            </select>\n            <input\n              type=\"text\"\n              placeholder=\"Or enter a new patient\"\n              value={patientName}\n              onChange={(e) => setPatientName(e.target.value)}\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Visit Date</label>\n            <input\n              type=\"date\"\n              value={visitDate}\n              onChange={(e) => setVisitDate(e.target.value)}\n            />\n          </div>\n        </div>\n\n        {/* Conditional Rendering: Clinical Notes or Vitals */}\n        {selectedPage === \"notes\" ? (\n   <main className=\"notewriter-content\">\n   <h1>Clinical Documentation</h1>\n\n\n   {/* Combined Textbox (Editable & Non-Editable Sections) */}\n   <textarea\n     ref={textAreaRef}\n     className=\"notewriter-textarea\"\n     placeholder=\"Type your clinical notes here...\"\n     value={noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText + \"\\n\\n\" + vitalsSection }\n     onChange={handleInputChange}\n   />\n   <button onClick={handleGeneratePrediction}>Generate Prediction</button>\n      {prediction && (\n        <div>\n          <h3>Prediction:</h3>\n          <p>{prediction}</p>\n        </div>\n      )}\n\n\n   <div className=\"button-group\">\n     <button className=\"exam-button\" onClick={() => setIsExamModalOpen(true)}>\n       Open Physical Exam\n     </button>\n     <button className=\"save-button\" onClick={saveNote}>\n       Save Note\n     </button>\n     <button className=\"refresh-button\" onClick={() => {\n  loadNote();\n  loadVitals();\n}}>\n  🔄 Refresh Data\n</button>\n\n     <button className=\"load-button\" onClick={loadNote}>\n       Load Note\n     </button>\n   </div>\n </main>\n\n        ) : (\n          <main className=\"vitals-content\">\n            <h1>Patient Vitals</h1>\n            <div className=\"input-group\">\n              <label>Blood Pressure (mmHg)</label>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. 120/80\"\n                value={vitals.bloodPressure}\n                onChange={(e) => setVitals({ ...vitals, bloodPressure: e.target.value })}\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Heart Rate (BPM)</label>\n              <input\n                type=\"number\"\n                placeholder=\"e.g. 72\"\n                value={vitals.heartRate}\n                onChange={(e) => setVitals({ ...vitals, heartRate: e.target.value })}\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Temperature (°F)</label>\n              <input\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"e.g. 98.6\"\n                value={vitals.temperature}\n                onChange={(e) => setVitals({ ...vitals, temperature: e.target.value })}\n              />\n            </div>\n            <div className=\"button-group\">\n              <button className=\"save-button\" onClick={saveVitals}>\n                Save Vitals\n              </button>\n              \n              <button className=\"load-button\" onClick={loadVitals}>\n                Load Vitals\n              </button>\n            </div>\n          </main>\n        )}\n      </div>\n      {isExamModalOpen && (\n       <PhysicalExamModal\n         setIsExamModalOpen={setIsExamModalOpen}\n         setPhysicalExamText={setPhysicalExamText}\n         existingExamText={physicalExamText}\n       />\n     )}\n   </div>\n );\n}\n\nexport default NoteWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}