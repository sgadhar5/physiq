{"ast":null,"code":"var _jsxFileName = \"/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { collection, doc, setDoc, getDocs, getDoc } from \"firebase/firestore\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteWriter() {\n  _s();\n  var _auth$currentUser;\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const textAreaRef = useRef(null);\n  const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid;\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (userId) fetchPatients();\n  }, [userId]);\n  const handleLogout = async () => {\n    try {\n      await auth.signOut();\n      navigate(\"/\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      alert(\"Failed to log out.\");\n    }\n  };\n\n  // Fetch list of patients for dropdown selection\n  // Fetch list of patients from Firestore and update dropdown\n  const fetchPatients = async () => {\n    try {\n      const notesCollectionRef = collection(db, \"notes\");\n      const snapshot = await getDocs(notesCollectionRef);\n      let patientList = [];\n      for (const docRef of snapshot.docs) {\n        // Fetch subcollections dynamically\n        const subcollections = await getDocs(collection(db, \"notes\", docRef.id, \"visits\"));\n        if (!subcollections.empty) {\n          patientList.push(docRef.id); // Push patient name (subcollection parent)\n        }\n      }\n      setPatients(patientList);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      alert(\"Failed to load patients.\");\n    }\n  };\n\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n  const saveNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      // Create or update the patient document first\n      const patientDocRef = doc(db, \"notes\", patientName);\n      await setDoc(patientDocRef, {\n        exists: true\n      }, {\n        merge: true\n      }); // Ensure the patient document exists\n\n      // Reference the specific visit document inside the \"visits\" subcollection\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      await setDoc(visitRef, {\n        noteText,\n        physicalExamText,\n        timestamp: new Date()\n      });\n      alert(\"Note saved successfully!\");\n      fetchPatients(); // Refresh the patient dropdown after saving\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note for a specific patient and visit date\n  const loadNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      } else {\n        alert(\"No saved note found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n  const handleInputChange = e => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notewriter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDE7A EMR Note Writer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"active\",\n            children: \"New Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Patient History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Orders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Labs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logout-button\",\n            onClick: handleLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Patient Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: patientName,\n        onChange: e => setPatientName(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 5\n        }, this), patients.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: name,\n          children: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 7\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Or enter a new patient\",\n        value: patientName,\n        onChange: e => setPatientName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Visit Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: visitDate,\n        onChange: e => setVisitDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"notewriter-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Clinical Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textAreaRef,\n        className: \"notewriter-textarea\",\n        placeholder: \"Type your clinical notes here...\",\n        value: noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"exam-button\",\n          onClick: () => setIsExamModalOpen(true),\n          children: \"Open Physical Exam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: saveNote,\n          children: \"Save Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"load-button\",\n          onClick: loadNote,\n          children: \"Load Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), isExamModalOpen && /*#__PURE__*/_jsxDEV(PhysicalExamModal, {\n      setIsExamModalOpen: setIsExamModalOpen,\n      setPhysicalExamText: setPhysicalExamText,\n      existingExamText: physicalExamText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteWriter, \"yEvG5OJQIPEaBhHTYakWfBnmTpA=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteWriter;\nexport default NoteWriter;\nvar _c;\n$RefreshReg$(_c, \"NoteWriter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","db","collection","doc","setDoc","getDocs","getDoc","useNavigate","PhysicalExamModal","jsxDEV","_jsxDEV","NoteWriter","_s","_auth$currentUser","patientName","setPatientName","visitDate","setVisitDate","noteText","setNoteText","physicalExamText","setPhysicalExamText","isExamModalOpen","setIsExamModalOpen","patients","setPatients","textAreaRef","userId","currentUser","uid","navigate","fetchPatients","handleLogout","signOut","error","console","alert","notesCollectionRef","snapshot","patientList","docRef","docs","subcollections","id","empty","push","saveNote","patientDocRef","exists","merge","visitRef","timestamp","Date","loadNote","docSnap","data","handleInputChange","e","updatedText","target","value","includes","splitIndex","indexOf","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","map","name","type","placeholder","ref","existingExamText","_c","$RefreshReg$"],"sources":["/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { collection, doc, setDoc, getDocs, getDoc } from \"firebase/firestore\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\n\nfunction NoteWriter() {\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const textAreaRef = useRef(null);\n  const userId = auth.currentUser?.uid;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (userId) fetchPatients();\n  }, [userId]);\n\n  const handleLogout = async () => {\n    try {\n      await auth.signOut();\n      navigate(\"/\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      alert(\"Failed to log out.\");\n    }\n  };\n  \n  // Fetch list of patients for dropdown selection\n// Fetch list of patients from Firestore and update dropdown\nconst fetchPatients = async () => {\n  try {\n    const notesCollectionRef = collection(db, \"notes\");\n    const snapshot = await getDocs(notesCollectionRef);\n\n    let patientList = [];\n\n    for (const docRef of snapshot.docs) {\n      // Fetch subcollections dynamically\n      const subcollections = await getDocs(collection(db, \"notes\", docRef.id, \"visits\"));\n      if (!subcollections.empty) {\n        patientList.push(docRef.id); // Push patient name (subcollection parent)\n      }\n    }\n\n    setPatients(patientList);\n  } catch (error) {\n    console.error(\"Error fetching patients:\", error);\n    alert(\"Failed to load patients.\");\n  }\n};\n\n\n\n\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n// Save note under the selected patient's visit\nconst saveNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    // Create or update the patient document first\n    const patientDocRef = doc(db, \"notes\", patientName);\n    await setDoc(patientDocRef, { exists: true }, { merge: true }); // Ensure the patient document exists\n\n    // Reference the specific visit document inside the \"visits\" subcollection\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n    await setDoc(visitRef, {\n      noteText,\n      physicalExamText,\n      timestamp: new Date(),\n    });\n\n    alert(\"Note saved successfully!\");\n    fetchPatients(); // Refresh the patient dropdown after saving\n  } catch (error) {\n    console.error(\"Error saving note:\", error);\n    alert(\"Failed to save note.\");\n  }\n};\n\n\n\n\n// Load note for a specific patient and visit date\nconst loadNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n    const docSnap = await getDoc(visitRef);\n\n    if (docSnap.exists()) {\n      setNoteText(docSnap.data().noteText || \"\");\n      setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n    } else {\n      alert(\"No saved note found for this patient and visit date.\");\n    }\n  } catch (error) {\n    console.error(\"Error loading note:\", error);\n    alert(\"Failed to load note.\");\n  }\n};\n\n\n\n\n  const handleInputChange = (e) => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n  return (\n    <div className=\"notewriter-container\">\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <h2>🩺 EMR Note Writer</h2>\n        <nav>\n          <ul>\n            <li className=\"active\">New Note</li>\n            <li>Patient History</li>\n            <li>Orders</li>\n            <li>Labs</li>\n            <button className=\"logout-button\" onClick={handleLogout}>\n    Logout\n  </button>\n          </ul>\n        </nav>\n        \n      </aside>\n\n      {/* Patient Selection */}\n      <div className=\"patient-info\">\n  <label>Patient Name:</label>\n  <select value={patientName} onChange={(e) => setPatientName(e.target.value)}>\n    <option value=\"\">Select a patient</option>\n    {patients.map((name) => (\n      <option key={name} value={name}>{name}</option>\n    ))}\n  </select>\n  <input\n    type=\"text\"\n    placeholder=\"Or enter a new patient\"\n    value={patientName}\n    onChange={(e) => setPatientName(e.target.value)}\n  />\n  <label>Visit Date:</label>\n  <input\n    type=\"date\"\n    value={visitDate}\n    onChange={(e) => setVisitDate(e.target.value)}\n  />\n</div>\n\n\n      {/* Main Content */}\n      <main className=\"notewriter-content\">\n        <h1>Clinical Documentation</h1>\n\n        {/* Combined Textbox (Editable & Non-Editable Sections) */}\n        <textarea\n          ref={textAreaRef}\n          className=\"notewriter-textarea\"\n          placeholder=\"Type your clinical notes here...\"\n          value={noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText}\n          onChange={handleInputChange}\n        />\n\n        <div className=\"button-group\">\n          <button className=\"exam-button\" onClick={() => setIsExamModalOpen(true)}>\n            Open Physical Exam\n          </button>\n          <button className=\"save-button\" onClick={saveNote}>\n            Save Note\n          </button>\n          <button className=\"load-button\" onClick={loadNote}>\n            Load Note\n          </button>\n        </div>\n      </main>\n\n      {isExamModalOpen && (\n        <PhysicalExamModal\n          setIsExamModalOpen={setIsExamModalOpen}\n          setPhysicalExamText={setPhysicalExamText}\n          existingExamText={physicalExamText}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default NoteWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}