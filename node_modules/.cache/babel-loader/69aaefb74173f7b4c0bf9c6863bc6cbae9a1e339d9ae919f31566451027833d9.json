{"ast":null,"code":"var _jsxFileName = \"/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { collection, query, where, orderBy, limit, getDocs, doc, setDoc, getDoc } from \"firebase/firestore\";\nimport OpenAI from \"openai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  apiKey: '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',\n  dangerouslyAllowBrowser: true\n});\nfunction NoteWriter() {\n  _s();\n  var _auth$currentUser;\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n  const [patients, setPatients] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(\"notes\"); // Toggle between Notes and Vitals\n  const [vitals, setVitals] = useState({\n    bloodPressure: \"\",\n    heartRate: \"\",\n    temperature: \"\"\n  });\n  const textAreaRef = useRef(null);\n  const [messages, setMessages] = useState([]);\n  const [suggestions, setSuggestions] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState('');\n  const speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new speechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid;\n  const navigate = useNavigate();\n  useEffect(() => {\n    recognition.onresult = event => {\n      let interimTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          interimTranscript += transcript;\n        }\n      }\n      setFinalTranscript(current => current + interimTranscript);\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error', event.error);\n    };\n    recognition.onend = () => {\n      if (isListening) {\n        recognition.start(); // Auto-restart for continuous listening\n      }\n    };\n    if (isListening) {\n      recognition.start();\n    } else {\n      recognition.stop();\n    }\n    return () => {\n      recognition.stop();\n    };\n  }, [isListening]);\n\n  // Handle updates of final transcript and reset\n  useEffect(() => {\n    setNoteText(noteText => noteText + finalTranscript);\n    setFinalTranscript(''); // Reset final transcript after appending\n  }, [finalTranscript]);\n\n  // Patient-specific logic\n  useEffect(() => {\n    fetchPatients(); // Function to fetch patient list\n    if (patientName && visitDate) {\n      loadNote(); // Function to load notes\n      loadVitals(); // Function to load vitals\n    }\n  }, [patientName, visitDate]);\n\n  // Fetch list of patients from Firestore\n  const fetchPatients = async () => {\n    try {\n      const notesCollectionRef = collection(db, \"notes\");\n      const snapshot = await getDocs(notesCollectionRef);\n      let patientList = snapshot.docs.map(doc => doc.id);\n      setPatients(patientList);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      alert(\"Failed to load patients.\");\n    }\n  };\n  // Save note under the selected patient's visit\n  const saveNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      await setDoc(patientDocRef, {\n        exists: true\n      }, {\n        merge: true\n      });\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n      // Get existing data to merge instead of replacing\n      const visitSnap = await getDoc(visitRef);\n      let existingData = visitSnap.exists() ? visitSnap.data() : {};\n      await setDoc(visitRef, {\n        ...existingData,\n        // Keep existing vitals if they exist\n        noteText,\n        physicalExamText,\n        timestamp: new Date()\n      });\n      alert(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note for a specific patient and visit date\n  const loadNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      } else {\n        alert(\"No saved note found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n  const saveVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      await setDoc(patientDocRef, {\n        exists: true\n      }, {\n        merge: true\n      });\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n      // Get existing data to merge instead of replacing\n      const visitSnap = await getDoc(visitRef);\n      let existingData = visitSnap.exists() ? visitSnap.data() : {};\n      await setDoc(visitRef, {\n        ...existingData,\n        // Keep existing notes if they exist\n        vitals,\n        timestamp: new Date()\n      });\n      alert(\"Vitals saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving vitals:\", error);\n      alert(\"Failed to save vitals.\");\n    }\n  };\n\n  // Load vitals for a specific patient and visit date\n  const loadVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists() && docSnap.data().vitals) {\n        const vitalsData = docSnap.data().vitals;\n        setVitals(vitalsData);\n\n        // Format the vitals section\n        const vitalsText = `\\n\\n**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`;\n        setVitalsSection(`**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`);\n\n        // Ensure it is inserted AFTER the physical exam section\n      } else {\n        alert(\"No saved vitals found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading vitals:\", error);\n      alert(\"Failed to load vitals.\");\n    }\n  };\n  const [vitalsSection, setVitalsSection] = useState(\"**Vitals**\\n- Blood Pressure: N/A\\n- Heart Rate: N/A BPM\\n- Temperature: N/A°F\");\n  const handleInputChange = e => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n  // Function to fetch past notes from Firestore according to the specified database structure\n  const fetchPastNotes = async patientName => {\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName); // Pointing to the patient's document by name\n      const visitsCollectionRef = collection(patientDocRef, \"visits\"); // Subcollection of visits\n      const notesQuery = query(visitsCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5)); // Query to fetch the latest 5 visits\n\n      const querySnapshot = await getDocs(notesQuery);\n      const pastNotes = [];\n      querySnapshot.forEach(doc => {\n        if (doc.exists() && doc.data().noteText) {\n          pastNotes.push(doc.data().noteText); // Fetching the noteText field\n        }\n      });\n      return pastNotes;\n    } catch (error) {\n      console.error(\"Error fetching past notes:\", error);\n      return [];\n    }\n  };\n\n  // Function to generate suggestions using OpenAI's GPT-4\n  const generateSuggestion = async (currentText, patientName) => {\n    console.log(\"Generating suggestion for current text:\", currentText); // Debug: Log current text\n    const pastNotes = await fetchPastNotes(patientName);\n    if (!pastNotes.length) {\n      console.log(\"No past notes available for prediction.\"); // Debug: Log when no notes are available\n      return \"\";\n    }\n    const prompt = `\nUse the past notes to make a fill in the blank structure for the physician to easily fill out for the whole HPI.\n    ${pastNotes}\n\n    Current draft text needing enhancement:\n    \"${currentText}\"\n\n\n    `;\n    console.log(\"Sending prompt to OpenAI:\", prompt); // Debug: Log the full prompt sent to OpenAI\n\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer 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` // Use your API key\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [{\n            role: \"system\",\n            content: \"You are a ai tool to provide suggestive predictions for a doctor filling out a HPI note. Don't suggest any information relevant to the patient like complaints, symptoms, age, or gender.\"\n          }, ...messages.map(msg => ({\n            role: msg.sender === \"user\" ? \"user\" : \"assistant\",\n            content: msg.text\n          })), {\n            role: \"user\",\n            content: prompt\n          }]\n        })\n      });\n      const data = await response.json();\n      console.log(\"Prediction response:\", data); // Debug: Log response data\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error(\"Error generating AI suggestion:\", error);\n      return \"\";\n    }\n  };\n  const handleGeneratePrediction = async () => {\n    if (!patientName) {\n      alert('Please select a patient.');\n      return;\n    }\n    setIsLoading(true); // Set loading to true\n    console.log(\"Starting prediction generation...\"); // Debug: Log start of prediction generation\n    const suggestion = await generateSuggestion(noteText, patientName);\n    setSuggestions(suggestion); // Set the fetched suggestion into the suggestions state\n    setIsLoading(false); // Set loading to false\n    console.log(\"Prediction generated and set.\"); // Debug: Log successful prediction setting\n    setNoteText(noteText + suggestion);\n    return suggestion;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notewriter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDE7A EMR System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedPage === \"notes\" ? \"active\" : \"\",\n            onClick: () => setSelectedPage(\"notes\"),\n            children: \"Clinical Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedPage === \"vitals\" ? \"active\" : \"\",\n            onClick: () => setSelectedPage(\"vitals\"),\n            children: \"Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Patient Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: patientName,\n            onChange: e => setPatientName(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), patients.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: name,\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Or enter a new patient\",\n            value: patientName,\n            onChange: e => setPatientName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Visit Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: visitDate,\n            onChange: e => setVisitDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), selectedPage === \"notes\" ? /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"notewriter-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Clinical Documentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textAreaRef,\n          className: \"notewriter-textarea\",\n          placeholder: \"Type your clinical notes here...\",\n          value: noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText + \"\\n\\n\" + vitalsSection + \"\\n\\n\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGeneratePrediction,\n          disabled: isLoading,\n          children: isLoading ? 'Generating...' : 'Generate Prediction'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 4\n        }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Suggestion:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: suggestions,\n            onChange: e => setSuggestions(e.target.value),\n            style: {\n              width: \"100%\",\n              height: \"100px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"exam-button\",\n            onClick: () => setIsExamModalOpen(true),\n            children: \"Open Physical Exam\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsListening(prevState => !prevState),\n            children: isListening ? 'Stop Listening' : 'Start Listening'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveNote,\n            children: \"Save Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"refresh-button\",\n            onClick: () => {\n              loadNote();\n              loadVitals();\n            },\n            children: \"\\uD83D\\uDD04 Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"load-button\",\n            onClick: loadNote,\n            children: \"Load Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"vitals-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Patient Vitals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Blood Pressure (mmHg)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"e.g. 120/80\",\n            value: vitals.bloodPressure,\n            onChange: e => setVitals({\n              ...vitals,\n              bloodPressure: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Heart Rate (BPM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"e.g. 72\",\n            value: vitals.heartRate,\n            onChange: e => setVitals({\n              ...vitals,\n              heartRate: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Temperature (\\xB0F)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            step: \"0.1\",\n            placeholder: \"e.g. 98.6\",\n            value: vitals.temperature,\n            onChange: e => setVitals({\n              ...vitals,\n              temperature: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            onClick: saveVitals,\n            children: \"Save Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"load-button\",\n            onClick: loadVitals,\n            children: \"Load Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), isExamModalOpen && /*#__PURE__*/_jsxDEV(PhysicalExamModal, {\n      setIsExamModalOpen: setIsExamModalOpen,\n      setPhysicalExamText: setPhysicalExamText,\n      existingExamText: physicalExamText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteWriter, \"Ooqhj3ECWBvD/y5fzLp9S8yBXjY=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteWriter;\nexport default NoteWriter;\nvar _c;\n$RefreshReg$(_c, \"NoteWriter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","db","useNavigate","PhysicalExamModal","collection","query","where","orderBy","limit","getDocs","doc","setDoc","getDoc","OpenAI","jsxDEV","_jsxDEV","openai","apiKey","dangerouslyAllowBrowser","NoteWriter","_s","_auth$currentUser","patientName","setPatientName","visitDate","setVisitDate","prediction","setPrediction","noteText","setNoteText","physicalExamText","setPhysicalExamText","isExamModalOpen","setIsExamModalOpen","isLoading","setIsLoading","patients","setPatients","selectedPage","setSelectedPage","vitals","setVitals","bloodPressure","heartRate","temperature","textAreaRef","messages","setMessages","suggestions","setSuggestions","isListening","setIsListening","finalTranscript","setFinalTranscript","speechRecognition","window","SpeechRecognition","webkitSpeechRecognition","recognition","continuous","interimResults","lang","userId","currentUser","uid","navigate","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","current","onerror","console","error","onend","start","stop","fetchPatients","loadNote","loadVitals","notesCollectionRef","snapshot","patientList","docs","map","id","alert","saveNote","patientDocRef","exists","merge","visitRef","visitSnap","existingData","data","timestamp","Date","docSnap","saveVitals","vitalsData","vitalsText","setVitalsSection","vitalsSection","handleInputChange","e","updatedText","target","value","includes","splitIndex","indexOf","slice","fetchPastNotes","visitsCollectionRef","notesQuery","querySnapshot","pastNotes","forEach","push","generateSuggestion","currentText","log","prompt","response","fetch","method","headers","Authorization","body","JSON","stringify","model","role","content","msg","sender","text","json","choices","message","handleGeneratePrediction","suggestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleLogout","onChange","name","type","placeholder","ref","disabled","style","width","height","prevState","step","existingExamText","_c","$RefreshReg$"],"sources":["/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { collection, query, where, orderBy, limit, getDocs, doc, setDoc,getDoc } from \"firebase/firestore\";\n\nimport OpenAI from \"openai\";\nconst openai = new OpenAI({apiKey : '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', dangerouslyAllowBrowser: true} );\n\nfunction NoteWriter() {\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n  const [patients, setPatients] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(\"notes\"); // Toggle between Notes and Vitals\n  const [vitals, setVitals] = useState({ bloodPressure: \"\", heartRate: \"\", temperature: \"\" });\n  const textAreaRef = useRef(null);\n  const [messages, setMessages] = useState([]);\n  const [suggestions, setSuggestions] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState('');\n\n  const speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new speechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n\n  const userId = auth.currentUser?.uid;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    recognition.onresult = (event) => {\n        let interimTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) {\n                interimTranscript += transcript;\n            }\n        }\n        setFinalTranscript(current => current + interimTranscript);\n    };\n\n    recognition.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n    };\n\n    recognition.onend = () => {\n        if (isListening) {\n            recognition.start(); // Auto-restart for continuous listening\n        }\n    };\n\n    if (isListening) {\n        recognition.start();\n    } else {\n        recognition.stop();\n    }\n\n    return () => {\n        recognition.stop();\n    };\n}, [isListening]);\n\n// Handle updates of final transcript and reset\nuseEffect(() => {\n    setNoteText(noteText => noteText + finalTranscript);\n    setFinalTranscript(''); // Reset final transcript after appending\n}, [finalTranscript]);\n\n// Patient-specific logic\nuseEffect(() => {\n    fetchPatients(); // Function to fetch patient list\n    if (patientName && visitDate) {\n        loadNote(); // Function to load notes\n        loadVitals(); // Function to load vitals\n    }\n}, [patientName, visitDate]);\n  \n  // Fetch list of patients from Firestore\n  const fetchPatients = async () => {\n    try {\n      const notesCollectionRef = collection(db, \"notes\");\n      const snapshot = await getDocs(notesCollectionRef);\n      let patientList = snapshot.docs.map((doc) => doc.id);\n      setPatients(patientList);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n      alert(\"Failed to load patients.\");\n    }\n  };\n // Save note under the selected patient's visit\n const saveNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    await setDoc(patientDocRef, { exists: true }, { merge: true });\n\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n    // Get existing data to merge instead of replacing\n    const visitSnap = await getDoc(visitRef);\n    let existingData = visitSnap.exists() ? visitSnap.data() : {};\n\n    await setDoc(visitRef, {\n      ...existingData, // Keep existing vitals if they exist\n      noteText,\n      physicalExamText,\n      timestamp: new Date(),\n    });\n\n    alert(\"Note saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving note:\", error);\n    alert(\"Failed to save note.\");\n  }\n};\n\n\n\n// Load note for a specific patient and visit date\nconst loadNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n    const docSnap = await getDoc(visitRef);\n\n\n    if (docSnap.exists()) {\n      setNoteText(docSnap.data().noteText || \"\");\n      setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n    } else {\n      alert(\"No saved note found for this patient and visit date.\");\n    }\n  } catch (error) {\n    console.error(\"Error loading note:\", error);\n    alert(\"Failed to load note.\");\n  }\n};\n\nconst saveVitals = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    await setDoc(patientDocRef, { exists: true }, { merge: true });\n\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n\n    // Get existing data to merge instead of replacing\n    const visitSnap = await getDoc(visitRef);\n    let existingData = visitSnap.exists() ? visitSnap.data() : {};\n\n    await setDoc(visitRef, {\n      ...existingData, // Keep existing notes if they exist\n      vitals,\n      timestamp: new Date(),\n    });\n\n    alert(\"Vitals saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving vitals:\", error);\n    alert(\"Failed to save vitals.\");\n  }\n};\n\n\n  // Load vitals for a specific patient and visit date\n  const loadVitals = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n  \n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n  \n      if (docSnap.exists() && docSnap.data().vitals) {\n        const vitalsData = docSnap.data().vitals;\n  \n        setVitals(vitalsData);\n  \n        // Format the vitals section\n        const vitalsText = `\\n\\n**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`;\n        setVitalsSection(`**Vitals**\\n- Blood Pressure: ${vitalsData.bloodPressure || \"N/A\"}\\n- Heart Rate: ${vitalsData.heartRate || \"N/A\"} BPM\\n- Temperature: ${vitalsData.temperature || \"N/A\"}°F`);\n\n        // Ensure it is inserted AFTER the physical exam section\n\n      } else {\n        alert(\"No saved vitals found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading vitals:\", error);\n      alert(\"Failed to load vitals.\");\n    }\n  };\n  const [vitalsSection, setVitalsSection] = useState(\"**Vitals**\\n- Blood Pressure: N/A\\n- Heart Rate: N/A BPM\\n- Temperature: N/A°F\");\n\n\n  const handleInputChange = (e) => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n\n\n// Function to fetch past notes from Firestore according to the specified database structure\nconst fetchPastNotes = async (patientName) => {\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);  // Pointing to the patient's document by name\n    const visitsCollectionRef = collection(patientDocRef, \"visits\");  // Subcollection of visits\n    const notesQuery = query(visitsCollectionRef, orderBy(\"timestamp\", \"desc\"), limit(5));  // Query to fetch the latest 5 visits\n\n    const querySnapshot = await getDocs(notesQuery);\n    const pastNotes = [];\n    querySnapshot.forEach((doc) => {\n      if (doc.exists() && doc.data().noteText) {\n        pastNotes.push(doc.data().noteText);  // Fetching the noteText field\n      }\n    });\n\n    return pastNotes;\n  } catch (error) {\n    console.error(\"Error fetching past notes:\", error);\n    return [];\n  }\n};\n\n  \n  // Function to generate suggestions using OpenAI's GPT-4\n  const generateSuggestion = async (currentText, patientName) => {\n    console.log(\"Generating suggestion for current text:\", currentText); // Debug: Log current text\n    const pastNotes = await fetchPastNotes(patientName);\n    if (!pastNotes.length) {\n      console.log(\"No past notes available for prediction.\"); // Debug: Log when no notes are available\n      return \"\";\n    }\n  \n    const prompt = `\nUse the past notes to make a fill in the blank structure for the physician to easily fill out for the whole HPI.\n    ${pastNotes}\n\n    Current draft text needing enhancement:\n    \"${currentText}\"\n\n\n    `;\n  \n    console.log(\"Sending prompt to OpenAI:\", prompt); // Debug: Log the full prompt sent to OpenAI\n  \n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer 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`, // Use your API key\n        },\n        body: JSON.stringify({\n          model: \"gpt-4\",\n          messages: [\n            { role: \"system\", content: \"You are a ai tool to provide suggestive predictions for a doctor filling out a HPI note. Don't suggest any information relevant to the patient like complaints, symptoms, age, or gender.\" },\n            ...messages.map((msg) => ({\n              role: msg.sender === \"user\" ? \"user\" : \"assistant\",\n              content: msg.text,\n            })),\n            { role: \"user\", content: prompt },\n          ],\n        }),\n      });\n\n  \n      const data = await response.json();\n      console.log(\"Prediction response:\", data); // Debug: Log response data\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error(\"Error generating AI suggestion:\", error);\n      return \"\";\n    }\n  };\n\n\n const handleGeneratePrediction = async () => {\n    if (!patientName) {\n      alert('Please select a patient.');\n      return;\n    }\n    setIsLoading(true); // Set loading to true\n    console.log(\"Starting prediction generation...\"); // Debug: Log start of prediction generation\n    const suggestion = await generateSuggestion(noteText, patientName);\n    setSuggestions(suggestion);  // Set the fetched suggestion into the suggestions state\n    setIsLoading(false); // Set loading to false\n    console.log(\"Prediction generated and set.\"); // Debug: Log successful prediction setting\n    setNoteText(noteText + suggestion);\n    return suggestion;\n  };\n\n\n  \n \n \n  return (\n    <div className=\"notewriter-container\">\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <h2>🩺 EMR System</h2>\n        <nav>\n          <ul>\n            <li className={selectedPage === \"notes\" ? \"active\" : \"\"} onClick={() => setSelectedPage(\"notes\")}>\n              Clinical Notes\n            </li>\n            <li className={selectedPage === \"vitals\" ? \"active\" : \"\"} onClick={() => setSelectedPage(\"vitals\")}>\n              Vitals\n            </li>\n          </ul>\n        </nav>\n        <button className=\"logout-button\" onClick={handleLogout}>\n          Logout\n        </button>\n      </aside>\n\n      {/* Patient Selection */}\n      <div className=\"content-container\">\n        <div className=\"patient-info\">\n          <h3>Patient Selection</h3>\n          <div className=\"input-group\">\n            <label>Patient Name</label>\n            <select value={patientName} onChange={(e) => setPatientName(e.target.value)}>\n              <option value=\"\">Select a patient</option>\n              {patients.map((name) => (\n                <option key={name} value={name}>{name}</option>\n              ))}\n            </select>\n            <input\n              type=\"text\"\n              placeholder=\"Or enter a new patient\"\n              value={patientName}\n              onChange={(e) => setPatientName(e.target.value)}\n            />\n          </div>\n          <div className=\"input-group\">\n            <label>Visit Date</label>\n            <input\n              type=\"date\"\n              value={visitDate}\n              onChange={(e) => setVisitDate(e.target.value)}\n            />\n          </div>\n        </div>\n\n        {/* Conditional Rendering: Clinical Notes or Vitals */}\n        {selectedPage === \"notes\" ? (\n   <main className=\"notewriter-content\">\n   <h1>Clinical Documentation</h1>\n\n\n   {/* Combined Textbox (Editable & Non-Editable Sections) */}\n   <textarea\n     ref={textAreaRef}\n     className=\"notewriter-textarea\"\n     placeholder=\"Type your clinical notes here...\"\n     value={noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText + \"\\n\\n\" + vitalsSection + \"\\n\\n\"  }\n     onChange={handleInputChange}\n   />\n   <button onClick={handleGeneratePrediction} disabled={isLoading}>\n        {isLoading ? 'Generating...' : 'Generate Prediction'}\n      </button>\n      {prediction && (\n        <div>\n          <h3>Suggestion:</h3>\n          <textarea\n            value={suggestions}\n            onChange={(e) => setSuggestions(e.target.value)}\n            style={{ width: \"100%\", height: \"100px\" }}\n          />\n        </div>\n        \n      )}\n\n\n   <div className=\"button-group\">\n     <button className=\"exam-button\" onClick={() => setIsExamModalOpen(true)}>\n       Open Physical Exam\n     </button>\n     <button onClick={() => setIsListening(prevState => !prevState)}>\n        {isListening ? 'Stop Listening' : 'Start Listening'}\n      </button>\n     <button className=\"save-button\" onClick={saveNote}>\n       Save Note\n     </button>\n     <button className=\"refresh-button\" onClick={() => {\n  loadNote();\n  loadVitals();\n}}>\n  🔄 Refresh Data\n</button>\n\n     <button className=\"load-button\" onClick={loadNote}>\n       Load Note\n     </button>\n   </div>\n </main>\n\n        ) : (\n          <main className=\"vitals-content\">\n            <h1>Patient Vitals</h1>\n            <div className=\"input-group\">\n              <label>Blood Pressure (mmHg)</label>\n              <input\n                type=\"text\"\n                placeholder=\"e.g. 120/80\"\n                value={vitals.bloodPressure}\n                onChange={(e) => setVitals({ ...vitals, bloodPressure: e.target.value })}\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Heart Rate (BPM)</label>\n              <input\n                type=\"number\"\n                placeholder=\"e.g. 72\"\n                value={vitals.heartRate}\n                onChange={(e) => setVitals({ ...vitals, heartRate: e.target.value })}\n              />\n            </div>\n            <div className=\"input-group\">\n              <label>Temperature (°F)</label>\n              <input\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"e.g. 98.6\"\n                value={vitals.temperature}\n                onChange={(e) => setVitals({ ...vitals, temperature: e.target.value })}\n              />\n            </div>\n            <div className=\"button-group\">\n              <button className=\"save-button\" onClick={saveVitals}>\n                Save Vitals\n              </button>\n              \n              <button className=\"load-button\" onClick={loadVitals}>\n                Load Vitals\n              </button>\n            </div>\n          </main>\n        )}\n      </div>\n      {isExamModalOpen && (\n       <PhysicalExamModal\n         setIsExamModalOpen={setIsExamModalOpen}\n         setPhysicalExamText={setPhysicalExamText}\n         existingExamText={physicalExamText}\n       />\n     )}\n   </div>\n );\n}\n\nexport default NoteWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}