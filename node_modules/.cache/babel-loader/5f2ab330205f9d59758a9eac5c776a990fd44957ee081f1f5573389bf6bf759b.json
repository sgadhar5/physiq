{"ast":null,"code":"var _jsxFileName = \"/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { collection, doc, setDoc, getDocs, getDoc } from \"firebase/firestore\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteWriter() {\n  _s();\n  var _auth$currentUser;\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const textAreaRef = useRef(null);\n  const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid;\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (userId) fetchPatients();\n  }, [userId]);\n  const handleLogout = async () => {\n    await auth.signOut();\n    navigate(\"/\");\n  };\n\n  // Fetch list of patients for dropdown selection\n  const fetchPatients = async () => {\n    if (!userId) return;\n    const notesCollectionRef = collection(db, \"notes\");\n    const snapshot = await getDocs(notesCollectionRef);\n    let patientList = [];\n    snapshot.forEach(doc => {\n      patientList.push(doc.id); // Store patient names\n    });\n    setPatients(patientList);\n  };\n\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n  const saveNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      // Patient is stored as a document, visits are a subcollection\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      await setDoc(visitRef, {\n        noteText,\n        physicalExamText,\n        timestamp: new Date()\n      });\n      alert(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n      alert(\"Failed to save note.\");\n    }\n  };\n\n  // Load note for a specific patient and visit date\n  const loadNote = async () => {\n    if (!userId || !patientName || !visitDate) {\n      alert(\"Please enter a patient name and visit date.\");\n      return;\n    }\n    try {\n      const patientDocRef = doc(db, \"notes\", patientName);\n      const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n      const docSnap = await getDoc(visitRef);\n      if (docSnap.exists()) {\n        setNoteText(docSnap.data().noteText || \"\");\n        setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n      } else {\n        alert(\"No saved note found for this patient and visit date.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading note:\", error);\n      alert(\"Failed to load note.\");\n    }\n  };\n  const handleInputChange = e => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notewriter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDE7A EMR Note Writer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"active\",\n            children: \"New Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Patient History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Orders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Labs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Patient Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: patientName,\n        onChange: e => setPatientName(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), patients.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: name,\n          children: name\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Or enter a new patient\",\n        value: patientName,\n        onChange: e => setPatientName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Visit Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: visitDate,\n        onChange: e => setVisitDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"notewriter-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Clinical Documentation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textAreaRef,\n        className: \"notewriter-textarea\",\n        placeholder: \"Type your clinical notes here...\",\n        value: noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"exam-button\",\n          onClick: () => setIsExamModalOpen(true),\n          children: \"Open Physical Exam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-button\",\n          onClick: saveNote,\n          children: \"Save Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"load-button\",\n          onClick: loadNote,\n          children: \"Load Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), isExamModalOpen && /*#__PURE__*/_jsxDEV(PhysicalExamModal, {\n      setIsExamModalOpen: setIsExamModalOpen,\n      setPhysicalExamText: setPhysicalExamText,\n      existingExamText: physicalExamText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteWriter, \"yEvG5OJQIPEaBhHTYakWfBnmTpA=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteWriter;\nexport default NoteWriter;\nvar _c;\n$RefreshReg$(_c, \"NoteWriter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","auth","db","collection","doc","setDoc","getDocs","getDoc","useNavigate","PhysicalExamModal","jsxDEV","_jsxDEV","NoteWriter","_s","_auth$currentUser","patientName","setPatientName","visitDate","setVisitDate","noteText","setNoteText","physicalExamText","setPhysicalExamText","isExamModalOpen","setIsExamModalOpen","patients","setPatients","textAreaRef","userId","currentUser","uid","navigate","fetchPatients","handleLogout","signOut","notesCollectionRef","snapshot","patientList","forEach","push","id","saveNote","alert","patientDocRef","visitRef","timestamp","Date","error","console","loadNote","docSnap","exists","data","handleInputChange","e","updatedText","target","value","includes","splitIndex","indexOf","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","name","type","placeholder","ref","onClick","existingExamText","_c","$RefreshReg$"],"sources":["/Users/succhaygadhar/Downloads/physiq/src/components/NoteWriter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { auth, db } from \"./firebaseConfig\";\nimport { collection, doc, setDoc, getDocs, getDoc } from \"firebase/firestore\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./../styles/notewriter.css\";\nimport PhysicalExamModal from \"./PhysicalExamModal\";\n\nfunction NoteWriter() {\n  const [patientName, setPatientName] = useState(\"\");\n  const [visitDate, setVisitDate] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [physicalExamText, setPhysicalExamText] = useState(\"Physical Exam:\\n\");\n  const [isExamModalOpen, setIsExamModalOpen] = useState(false);\n  const [patients, setPatients] = useState([]);\n  const textAreaRef = useRef(null);\n  const userId = auth.currentUser?.uid;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (userId) fetchPatients();\n  }, [userId]);\n\n  const handleLogout = async () => {\n    await auth.signOut();\n    navigate(\"/\");\n  };\n\n  // Fetch list of patients for dropdown selection\n  const fetchPatients = async () => {\n    if (!userId) return;\n    const notesCollectionRef = collection(db, \"notes\");\n    const snapshot = await getDocs(notesCollectionRef);\n    let patientList = [];\n    snapshot.forEach((doc) => {\n      patientList.push(doc.id); // Store patient names\n    });\n    setPatients(patientList);\n  };\n\n  // Save note under the selected patient's visit\n  // Save note under the selected patient's visit\n// Save note under the selected patient's visit\nconst saveNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    // Patient is stored as a document, visits are a subcollection\n    const patientDocRef = doc(db, \"notes\", patientName);\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate); \n\n    await setDoc(visitRef, {\n      noteText,\n      physicalExamText,\n      timestamp: new Date(),\n    });\n\n    alert(\"Note saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving note:\", error);\n    alert(\"Failed to save note.\");\n  }\n};\n\n// Load note for a specific patient and visit date\nconst loadNote = async () => {\n  if (!userId || !patientName || !visitDate) {\n    alert(\"Please enter a patient name and visit date.\");\n    return;\n  }\n\n  try {\n    const patientDocRef = doc(db, \"notes\", patientName);\n    const visitRef = doc(collection(patientDocRef, \"visits\"), visitDate);\n    const docSnap = await getDoc(visitRef);\n\n    if (docSnap.exists()) {\n      setNoteText(docSnap.data().noteText || \"\");\n      setPhysicalExamText(docSnap.data().physicalExamText || \"Physical Exam:\\n\");\n    } else {\n      alert(\"No saved note found for this patient and visit date.\");\n    }\n  } catch (error) {\n    console.error(\"Error loading note:\", error);\n    alert(\"Failed to load note.\");\n  }\n};\n\n\n\n  const handleInputChange = (e) => {\n    const updatedText = e.target.value;\n    if (updatedText.includes(\"\\n\\n**Physical Exam**\\n\")) {\n      const splitIndex = updatedText.indexOf(\"\\n\\n**Physical Exam**\\n\");\n      setNoteText(updatedText.slice(0, splitIndex));\n    } else {\n      setNoteText(updatedText);\n    }\n  };\n\n  return (\n    <div className=\"notewriter-container\">\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <h2>🩺 EMR Note Writer</h2>\n        <nav>\n          <ul>\n            <li className=\"active\">New Note</li>\n            <li>Patient History</li>\n            <li>Orders</li>\n            <li>Labs</li>\n          </ul>\n        </nav>\n      </aside>\n\n      {/* Patient Selection */}\n      <div className=\"patient-info\">\n        <label>Patient Name:</label>\n        <select value={patientName} onChange={(e) => setPatientName(e.target.value)}>\n          <option value=\"\">Select a patient</option>\n          {patients.map((name) => (\n            <option key={name} value={name}>{name}</option>\n          ))}\n        </select>\n        <input\n          type=\"text\"\n          placeholder=\"Or enter a new patient\"\n          value={patientName}\n          onChange={(e) => setPatientName(e.target.value)}\n        />\n        <label>Visit Date:</label>\n        <input\n          type=\"date\"\n          value={visitDate}\n          onChange={(e) => setVisitDate(e.target.value)}\n        />\n      </div>\n\n      {/* Main Content */}\n      <main className=\"notewriter-content\">\n        <h1>Clinical Documentation</h1>\n\n        {/* Combined Textbox (Editable & Non-Editable Sections) */}\n        <textarea\n          ref={textAreaRef}\n          className=\"notewriter-textarea\"\n          placeholder=\"Type your clinical notes here...\"\n          value={noteText + \"\\n\\n**Physical Exam**\\n\" + physicalExamText}\n          onChange={handleInputChange}\n        />\n\n        <div className=\"button-group\">\n          <button className=\"exam-button\" onClick={() => setIsExamModalOpen(true)}>\n            Open Physical Exam\n          </button>\n          <button className=\"save-button\" onClick={saveNote}>\n            Save Note\n          </button>\n          <button className=\"load-button\" onClick={loadNote}>\n            Load Note\n          </button>\n        </div>\n      </main>\n\n      {isExamModalOpen && (\n        <PhysicalExamModal\n          setIsExamModalOpen={setIsExamModalOpen}\n          setPhysicalExamText={setPhysicalExamText}\n          existingExamText={physicalExamText}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default NoteWriter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}